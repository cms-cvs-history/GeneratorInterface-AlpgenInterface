process PROD = {

   # MessageLogger control
   #
   service = MessageLogger
   {
      untracked vstring destinations = {"cout"}
       
      # untracked vstring categories = { "FwkJob" }
 
      untracked PSet cout = 
      { 
         untracked PSet default = { untracked int32 limit = 0 }    # kill all messages in the log
         # untracked PSet FwkJob  = { untracked int32 limit = -1 }  # except *all* of FwkJob's
      }
       
      #untracked vstring fwkJobReports = {"FrameworkJobReport.xml"}
   }
    
   # control point for all seeds
   #
   service = RandomNumberGeneratorService
   {
      untracked uint32 sourceSeed = 98765
   }

   # physics event generation
   #

  source = AlpgenSource
  { 
     
    untracked vstring fileNames = {"file:/tmp/fmoortga/CMSSW_1_4_3/src/GeneratorInterface/AlpgenInterface/test/alpgen"}
  
    untracked int32 maxEvents = -1
    
  
    # to printout pythia event record (call pylist)
    untracked int32 pythiaPylistVerbosity = 0
    # to printout HepMC::GenEvent record (HepMC::GenEvent::print())
    untracked bool pythiaHepMCVerbosity = false

    PSet PythiaParameters = 
   {
      vstring parameterSets =  {  "pythia" }
      vstring pythia = 
      { "MSEL=0              !(D=1) ",
        "MSTJ(11)=3          !Choice of the fragmentation function",
        "MSTP(143)=1         !Call the matching routine in ALPGEN"     }
  } 
  
  

# Alpgen parameters
    PSet GeneratorParameters = 
    { vstring parameterSets =  { "generator"  }
      vstring generator = 
       {         
        "IXpar(2) = 1            ! inclus./exclus. sample: 0/1",
       #Inputs for clustering: minET(CLUS), deltaR(CLUS)
        "RXpar(1) = 20.          ! ETCLUS : minET(CLUS)",
        "RXpar(2) = 0.7          ! RCLUS  : deltaR(CLUS)"
       }
    }
}

####
   module GEN = PoolOutputModule
   {
      untracked string fileName = "alpgen.root"
   }

   endpath e = { GEN }

}
