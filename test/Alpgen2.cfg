process PROD = {

  untracked PSet maxEvents = {untracked int32 input = 10}

  include "FWCore/Framework/test/cmsExceptionsFatal.cff"

   # MessageLogger control
   #
   service = MessageLogger {
      untracked vstring destinations = {"cout"}
    # untracked vstring categories = { "FwkJob" }
      untracked PSet cout = { 
         untracked PSet default = { untracked int32 limit = 0 }   # kill all log messages 
       # untracked PSet FwkJob  = { untracked int32 limit = -1 }  # except *all* of FwkJob's
      }
       
    #untracked vstring fwkJobReports = {"FrameworkJobReport.xml"}
   }
    
   # control point for all seeds
   #
   service = RandomNumberGeneratorService {
     PSet alp = {
       untracked string engineName  = "HepJamesRandom"
       untracked uint32 initialSeed = 97685
     }
   untracked string saveFileName    = "SaveState.dat"
   }

  source = EmptySource {}

   # physics event generation
   #

  module alp = AlpgenProducer {
    untracked vstring fileNames = {"file:alpgen"}
  
    # to printout pythia event record (call pylist)
    untracked int32 pythiaPylistVerbosity = 0

    # to printout HepMC::GenEvent record (HepMC::GenEvent::print())
    untracked bool pythiaHepMCVerbosity = false

    PSet PythiaParameters = {
      vstring parameterSets =  {  "pythia" }
      vstring pythia = {
        "MSEL=0              !(D=1) ",
        "MSTJ(11)=3          !Choice of the fragmentation function",
        "MSTP(143)=1         !Call the matching routine in ALPGEN"     }
  } 
  
# Alpgen parameters
   PSet GeneratorParameters = {
     vstring parameterSets =  { "generator"  }
     vstring generator = {         
       "IXpar(2) = 1            ! inclus./exclus. sample: 0/1",
      #Inputs for clustering: minET(CLUS), deltaR(CLUS)
       "RXpar(1) = 20.          ! ETCLUS : minET(CLUS)",
       "RXpar(2) = 0.7          ! RCLUS  : deltaR(CLUS)"
      }
    }
  }

#this filters out empty (rejected by matching) events from the PoolOutputModule
   module filter = AlpgenEmptyEventFilter {}

   path p1 = {alp, filter}

####
   module GEN = PoolOutputModule {
      untracked string fileName = "alpgen.root"
      untracked PSet SelectEvents = { vstring SelectEvents = {"p1"} }
   }

   endpath e = { GEN }

}
